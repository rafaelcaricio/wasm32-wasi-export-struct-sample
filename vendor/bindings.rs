/* automatically generated by rust-bindgen */

pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XValueUnion {
    pub float64: f64,
    pub ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_XValueUnion() {
    assert_eq!(
        ::std::mem::size_of::<XValueUnion>(),
        8usize,
        concat!("Size of: ", stringify!(XValueUnion))
    );
    assert_eq!(
        ::std::mem::align_of::<XValueUnion>(),
        8usize,
        concat!("Alignment of ", stringify!(XValueUnion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XValueUnion>())).float64 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XValueUnion),
            "::",
            stringify!(float64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XValueUnion>())).ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XValueUnion),
            "::",
            stringify!(ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XValue {
    pub u: XValueUnion,
    pub tag: f64,
}
#[test]
fn bindgen_test_layout_XValue() {
    assert_eq!(
        ::std::mem::size_of::<XValue>(),
        16usize,
        concat!("Size of: ", stringify!(XValue))
    );
    assert_eq!(
        ::std::mem::align_of::<XValue>(),
        8usize,
        concat!("Alignment of ", stringify!(XValue))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XValue>())).u as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(XValue), "::", stringify!(u))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XValue>())).tag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XValue),
            "::",
            stringify!(tag)
        )
    );
}
extern "C" {
    pub fn X_Run(input: *const ::std::os::raw::c_char, input_len: usize) -> XValue;
}
